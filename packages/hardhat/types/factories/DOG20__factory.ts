/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { DOG20, DOG20Interface } from "../DOG20";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "holders",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "__DOG20_init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "holders",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "initMock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610e4f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063554f120e1161008c57806395d89b411161006657806395d89b4114610197578063a457c2d71461019f578063a9059cbb146101b2578063dd62ed3e146101c5576100cf565b8063554f120e1461015c5780635e8c26bd1461017157806370a0823114610184576100cf565b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461011557806323b872dd14610127578063313ce5671461013a5780633950935114610149575b600080fd5b6100dc6101fe565b6040516100e99190610cde565b60405180910390f35b610105610100366004610be8565b610290565b60405190151581526020016100e9565b6035545b6040519081526020016100e9565b610105610135366004610bad565b6102a6565b604051601281526020016100e9565b610105610157366004610be8565b610355565b61016f61016a366004610c11565b610391565b005b61016f61017f366004610c11565b61044b565b610119610192366004610b5a565b61049a565b6100dc6104b9565b6101056101ad366004610be8565b6104c8565b6101056101c0366004610be8565b610561565b6101196101d3366004610b7b565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b60606036805461020d90610d97565b80601f016020809104026020016040519081016040528092919081815260200182805461023990610d97565b80156102865780601f1061025b57610100808354040283529160200191610286565b820191906000526020600020905b81548152906001019060200180831161026957829003601f168201915b5050505050905090565b600061029d33848461056e565b50600192915050565b60006102b3848484610692565b6001600160a01b03841660009081526034602090815260408083203384529091529020548281101561033d5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b61034a853385840361056e565b506001949350505050565b3360008181526034602090815260408083206001600160a01b0387168452909152812054909161029d91859061038c908690610d7f565b61056e565b600054610100900460ff16806103aa575060005460ff16155b6103c65760405162461bcd60e51b815260040161033490610d31565b600054610100900460ff161580156103e8576000805461ffff19166101011790555b61042a604051806040016040528060058152602001640444f4732360dc1b8152506040518060400160405280600381526020016204432360ec1b815250610861565b610434838361044b565b8015610446576000805461ff00191690555b505050565b60005b82518110156104465761048883828151811061047a57634e487b7160e01b600052603260045260246000fd5b6020026020010151836108ca565b8061049281610dd2565b91505061044e565b6001600160a01b0381166000908152603360205260409020545b919050565b60606037805461020d90610d97565b3360009081526034602090815260408083206001600160a01b03861684529091528120548281101561054a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610334565b610557338585840361056e565b5060019392505050565b600061029d338484610692565b6001600160a01b0383166105d05760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610334565b6001600160a01b0382166106315760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610334565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166106f65760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610334565b6001600160a01b0382166107585760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610334565b6001600160a01b038316600090815260336020526040902054818110156107d05760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610334565b6001600160a01b03808516600090815260336020526040808220858503905591851681529081208054849290610807908490610d7f565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161085391815260200190565b60405180910390a350505050565b600054610100900460ff168061087a575060005460ff16155b6108965760405162461bcd60e51b815260040161033490610d31565b600054610100900460ff161580156108b8576000805461ffff19166101011790555b6108c06109a9565b6104348383610a15565b6001600160a01b0382166109205760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610334565b80603560008282546109329190610d7f565b90915550506001600160a01b0382166000908152603360205260408120805483929061095f908490610d7f565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600054610100900460ff16806109c2575060005460ff16155b6109de5760405162461bcd60e51b815260040161033490610d31565b600054610100900460ff16158015610a00576000805461ffff19166101011790555b8015610a12576000805461ff00191690555b50565b600054610100900460ff1680610a2e575060005460ff16155b610a4a5760405162461bcd60e51b815260040161033490610d31565b600054610100900460ff16158015610a6c576000805461ffff19166101011790555b8251610a7f906036906020860190610aaa565b508151610a93906037906020850190610aaa565b508015610446576000805461ff0019169055505050565b828054610ab690610d97565b90600052602060002090601f016020900481019282610ad85760008555610b1e565b82601f10610af157805160ff1916838001178555610b1e565b82800160010185558215610b1e579182015b82811115610b1e578251825591602001919060010190610b03565b50610b2a929150610b2e565b5090565b5b80821115610b2a5760008155600101610b2f565b80356001600160a01b03811681146104b457600080fd5b600060208284031215610b6b578081fd5b610b7482610b43565b9392505050565b60008060408385031215610b8d578081fd5b610b9683610b43565b9150610ba460208401610b43565b90509250929050565b600080600060608486031215610bc1578081fd5b610bca84610b43565b9250610bd860208501610b43565b9150604084013590509250925092565b60008060408385031215610bfa578182fd5b610c0383610b43565b946020939093013593505050565b60008060408385031215610c23578182fd5b823567ffffffffffffffff80821115610c3a578384fd5b818501915085601f830112610c4d578384fd5b8135602082821115610c6157610c61610e03565b8160051b604051601f19603f83011681018181108682111715610c8657610c86610e03565b604052838152828101945085830182870184018b1015610ca4578889fd5b8896505b84871015610ccd57610cb981610b43565b865260019690960195948301948301610ca8565b509997909101359750505050505050565b6000602080835283518082850152825b81811015610d0a57858101830151858201604001528201610cee565b81811115610d1b5783604083870101525b50601f01601f1916929092016040019392505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60008219821115610d9257610d92610ded565b500190565b600181811c90821680610dab57607f821691505b60208210811415610dcc57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415610de657610de6610ded565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212205be7835612fb6fc156b4c5dd8cc315ed97a6ea4a5b5bbc6348f8d660dd8a9e6e64736f6c63430008030033";

type DOG20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DOG20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DOG20__factory extends ContractFactory {
  constructor(...args: DOG20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DOG20> {
    return super.deploy(overrides || {}) as Promise<DOG20>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): DOG20 {
    return super.attach(address) as DOG20;
  }
  connect(signer: Signer): DOG20__factory {
    return super.connect(signer) as DOG20__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DOG20Interface {
    return new utils.Interface(_abi) as DOG20Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): DOG20 {
    return new Contract(address, _abi, signerOrProvider) as DOG20;
  }
}
